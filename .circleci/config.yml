version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string  
    steps:
      - run:
          name: Destroy backend & frontend environments
          when: on_fail
          command: |
            echo Destroying environment <<parameters.workflow_id>>
            aws cloudformation delete-stack \
            --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} 
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack \
            --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} 
      
            

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_${CIRCLE_WORKFLOW_ID:0:7})            
            if(( $SUCCESS==1 ));
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
orbs: 
  slack: circleci/slack@4.10.1            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build  front-end
          command: |
            cd frontend
            npm install
            npm run build
      - slack/notify:
          event: always
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - slack/notify:
          event: always

      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: test frontend code
          command: |
            cd frontend
            npm install
            npm run test
      
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: test backend code
          command: |
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: run package vulnerability
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: audit node modules
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} 
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text >> .circleci/ansible/inventory.txt
      - run:
          name: install tar utility
          command: |
            yum install -y tar gzip

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - slack/notify:
          event: always     
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   


#configure-infrastructure installs certain dependencies on the remote machine-python,node,pm2
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["75:11:74:14:43:18:dc:4d:78:35:20:a3:54:bc:2a:ca"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies on container
          command: |
            apk add --update ansible
            apk add --update  tar gzip
      - run:
          name: Configure EC2 server
          command: |
            cat .circleci/ansible/inventory.txt
            ansible-playbook .circleci/ansible/configure-server.yml -i .circleci/ansible/inventory.txt 
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}     

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm build
            npm run migrations > migrations_dump.txt
            
      - run:
          name: Send migration status to kvdb.io
          command: |   
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
#rolls back; should migration fail
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   
      - revert-migrations           
       
#copy frontend build to S3 bucket
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install node and npm
          command: |
            yum update -y
            yum install -y tar gzip
            curl -sL https://rpm.nodesource.com/setup_13.x |  bash -
            yum install -y nodejs
            
      - attach_workspace:
          at: ~/
      - run:
          name: Build frontend
          command: |
            cd frontend
            npm install
            npm run build      
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$( aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   
      - revert-migrations
    
#unarchive backend server build to EC2 instance with ansible                    
  deploy-backend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["75:11:74:14:43:18:dc:4d:78:35:20:a3:54:bc:2a:ca"]

      - run:
          name: Install dependencies
          command: |
            yum update -y
            yum install -y  tar gzip
            curl -sL https://rpm.nodesource.com/setup_13.x | bash -
            yum install -y nodejs
            amazon-linux-extras install -y epel
            yum install -y ansible                      
      - attach_workspace:
          at: ~/      
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..         
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ls -l ~/project/
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   
      - revert-migrations 

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - run:
          name: Install dependencies
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      # - run:
      #     name: Get backend url and run backend smoke test
      #     command: |
      #       export BACKEND_IP=$( aws ec2 describe-instances \
      #       --query 'Reservations[*].Instances[*].PublicIpAddress' \
      #       --filters "Name=tag:project,Values=udapeople" --output text)
      #       export API_URL="http://${BACKEND_IP}:3030"
      #       echo "${API_URL}"
      #       if curl "${API_URL}/api/status" | grep "ok"
      #       then
      #           return 0
      #       else
      #           return 1
      #       fi
      # - run:
      #     name: Frontend smoke test.
      #     command: |
      #       URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
      #       echo ${URL} 
      #       if curl -s ${URL} | grep "Welcome"
      #       then
      #           return 1
      #       else
      #           return 1
      #       fi
      # - destroy-environment:
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   
      # - revert-migrations 

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   
      - revert-migrations 

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get all stack workflow id and remove old stack files
          command: |
            CURRENT_WORKFLOW_ID=${CIRCLE_WORKFLOW_ID:0:7}
            echo current workflow id: $CURRENT_WORKFLOW_ID
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            mystacks=($STACKS)
            echo ${#mystacks[@]} items in stack :
            echo $mystacks
            for work_id in ${mystacks[@]}
            do
            if [ ${work_id: -7} != $CURRENT_WORKFLOW_ID ]
            then
                aws s3 rm "s3://udapeople-${work_id: -7}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${work_id: -7}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${work_id: -7}"
                echo $work_id removed from stack
            else
              echo No old stack to remove
            fi
            done

  configure-node-exporter:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["75:11:74:14:43:18:dc:4d:78:35:20:a3:54:bc:2a:ca"]
      - run:
          name: Install dependencies
          command: |
            yum update -y
            yum install -y  tar gzip
            curl -sL https://rpm.nodesource.com/setup_13.x | bash -
            yum install -y nodejs
            amazon-linux-extras install -y epel
            yum install -y ansible
      - attach_workspace:
          at: ~/
      - run:
          name: Configure node_exporter
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook  node-exporter-config.yml -i inventory.txt

  deploy-prometheus-server:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["75:11:74:14:43:18:dc:4d:78:35:20:a3:54:bc:2a:ca"]
      - run:
          name: Install dependencies
          command: |
            yum update -y
            yum install -y  tar gzip
            curl -sL https://rpm.nodesource.com/setup_13.x | bash -
            yum install -y nodejs
            amazon-linux-extras install -y epel
            yum install -y ansible
      - attach_workspace:
          at: ~/
      - run:
          name: Spin up EC2 server for prometheus
          command: |
            echo "[server]" >> .circleci/ansible/inventory.txt
            aws cloudformation deploy \
              --template-file .circleci/files/prometheus-server.yml \
              --tags project=prometheus \
              --stack-name udapeople-prometheus-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Append IP to inventory file
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=prometheus" \
            --output text >> .circleci/ansible/inventory.txt
      - run:
          name: Install prometheus and alertmanager on server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt prometheus-alertmanager-config.yml  

workflows:
  default:
    jobs:
      # - build-frontend:
      #     context:
      #       - slack
      # - build-backend:
      #     context:
      #       - slack
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure:
      #     context:
      #       - slack
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      # - configure-infrastructure:
      #     context: 
      #       - slack
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      - smoke-test
          # requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
      # - configure-node-exporter:
      #     requires: [smoke-test]
      # - deploy-prometheus-server:
      #     requires: [configure-node-exporter]